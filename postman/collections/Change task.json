{
	"info": {
		"_postman_id": "71bdcb01-c174-427d-8368-3c4f86a41acc",
		"name": "Change task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "26126335-71bdcb01-c174-427d-8368-3c4f86a41acc"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04e9ecc9-5617-4a43-89e9-963df1bc28b1",
						"exec": [
							"let moment = require('moment')",
							"let chai = require('chai')",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"//Использование совместно библиотек moment и chai",
							"let ourDateTime = moment().utc().format('ddd, DD MMM YYYY HH:mm [GMT]');",
							"console.log(ourDateTime);",
							"// Получаем дату из заголовка ответа",
							"let responseDate = moment(responseHeaders['Date']);",
							"// Сравниваем с текущей датой",
							"pm.test(\"Дата в заголовке соответсвует текущей дате\", function () {",
							"    // Проверяем, совпадает ли дата в заголовке ответа с текущей датой",
							"    chai.expect(responseDate.isSame(ourDateTime, 'minute')).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    chai.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code name has string \\\"OK\\\"\", function () {",
							"    chai.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Проверка значения id_token\", function () {",
							"    // Проверяем, существует ли id-token в response body",
							"    chai.expect(jsonData).to.have.property('id_token');",
							"    // Проверяем, что значение id-token является строкой",
							"    chai.expect(jsonData['id_token']).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Content-Type is present and application/json\", function () {",
							"    // Проверяем, что заголовок Content-Type присутствует в ответе",
							"    chai.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"    // Проверяем, что значение заголовка Content-Type содержит \"application/json\"",
							"    chai.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Cache-Control is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Cache-Control\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache, no-store, max-age=0, must-revalidate\")",
							"});",
							"",
							"pm.test(\"Content-Security-Policy is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5726c8eb-8c01-432f-a34d-750815f34626",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "http://localhost:8080"
					},
					{
						"key": "Referer",
						"value": "http://localhost:8080/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "http://localhost:8080/api/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b77b8cf-b9c3-4e55-bfe8-7ce7fe318926",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"task_id\", jsonData.id)",
							"let chai = require('chai')",
							"let moment = require('moment')",
							"",
							"//Использование совместно библиотек moment и chai",
							"let ourDateTime = moment().utc().format('ddd, DD MMM YYYY HH:mm [GMT]');",
							"console.log(ourDateTime);",
							"// Получаем дату из заголовка ответа",
							"let responseDate = moment(responseHeaders['Date']);",
							"// Сравниваем с текущей датой",
							"pm.test(\"Дата в заголовке соответсвует текущей дате\", function () {",
							"    // Проверяем, совпадает ли дата в заголовке ответа с текущей датой",
							"    chai.expect(responseDate.isSame(ourDateTime, 'minute')).to.be.true;",
							"});",
							"",
							"pm.test(\"Your test name\", function () {",
							"    chai.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    chai.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"pm.test(\"Status code name has string \\\"Created\\\"\", function () {",
							"    chai.expect(pm.response.status).to.eql(\"Created\");",
							"});",
							"",
							"pm.test(\"Content-Type is present and application/json\", function () {",
							"    // Проверяем, что заголовок Content-Type присутствует в ответе",
							"    chai.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"    // Проверяем, что значение заголовка Content-Type содержит \"application/json\"",
							"    chai.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Cache-Control is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Cache-Control\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache, no-store, max-age=0, must-revalidate\")",
							"});",
							"",
							"pm.test(\"Content-Security-Policy is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "afce59d9-dcaa-422e-9b7f-89953b6afac3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca963812-ce84-41b5-95f8-0d9fe09fd6e4",
						"exec": [
							"let jsonData = pm.response.json();",
							"let chai = require('chai')",
							"let moment = require('moment')",
							"",
							"//Использование совместно библиотек moment и chai",
							"let ourDateTime = moment().utc().format('ddd, DD MMM YYYY HH:mm [GMT]');",
							"console.log(ourDateTime);",
							"// Получаем дату из заголовка ответа",
							"let responseDate = moment(responseHeaders['Date']);",
							"// Сравниваем с текущей датой",
							"pm.test(\"Дата в заголовке соответсвует текущей дате\", function () {",
							"    // Проверяем, совпадает ли дата в заголовке ответа с текущей датой",
							"    chai.expect(responseDate.isSame(ourDateTime, 'minute')).to.be.true;",
							"});",
							"",
							"// Проверяем, что тело ответа является массивом",
							"pm.test(\"Response body is an array\", function () {",
							"    chai.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"//Проверяем, что каждый элемент массива содержит нужные поля",
							"jsonData.forEach(function(item) {",
							"    pm.test(\"Item contains id property\", function () {",
							"        chai.expect(item).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"Item contains text property\", function () {",
							"        chai.expect(item).to.have.property('text');",
							"    });",
							"",
							"    pm.test(\"Item contains answer property\", function () {",
							"        chai.expect(item).to.have.property('answer');",
							"    });",
							"",
							"    pm.test(\"Item contains title property\", function () {",
							"        chai.expect(item).to.have.property('title');",
							"    });",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    chai.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code name has string \\\"OK\\\"\", function () {",
							"    chai.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Content-Type is present and application/json\", function () {",
							"    // Проверяем, что заголовок Content-Type присутствует в ответе",
							"    chai.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"    // Проверяем, что значение заголовка Content-Type содержит \"application/json\"",
							"    chai.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Cache-Control is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Cache-Control\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache, no-store, max-age=0, must-revalidate\")",
							"});",
							"",
							"pm.test(\"Content-Security-Policy is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "71764b2e-7f40-459d-abb7-ec87859459e3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e3f1bff-4886-42df-ba65-c6c80a9d1ad0",
						"exec": [
							"let jsonData = pm.response.json();",
							"let chai = require('chai')",
							"let moment = require('moment')",
							"",
							"//Использование совместно библиотек moment и chai",
							"let ourDateTime = moment().utc().format('ddd, DD MMM YYYY HH:mm [GMT]');",
							"console.log(ourDateTime);",
							"// Получаем дату из заголовка ответа",
							"let responseDate = moment(responseHeaders['Date']);",
							"// Сравниваем с текущей датой",
							"pm.test(\"Дата в заголовке соответсвует текущей дате\", function () {",
							"    // Проверяем, совпадает ли дата в заголовке ответа с текущей датой",
							"    chai.expect(responseDate.isSame(ourDateTime, 'minute')).to.be.true;",
							"});",
							"",
							"pm.test(\"Your test name\", function () {",
							"    chai.expect(jsonData.text).to.eql(\"some new new text\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    chai.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code name has string \\\"OK\\\"\", function () {",
							"    chai.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Content-Type is present and application/json\", function () {",
							"    // Проверяем, что заголовок Content-Type присутствует в ответе",
							"    chai.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"    // Проверяем, что значение заголовка Content-Type содержит \"application/json\"",
							"    chai.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Cache-Control is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Cache-Control\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache, no-store, max-age=0, must-revalidate\")",
							"});",
							"",
							"pm.test(\"Content-Security-Policy is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "99ae7e3f-8ffc-457c-afff-20237a09fbfc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c56ed5d8-d8b4-4a89-b146-485e01c0d440",
						"exec": [
							"let jsonData = pm.response.json();",
							"let chai = require('chai')",
							"let moment = require('moment')",
							"",
							"//Использование совместно библиотек moment и chai",
							"let ourDateTime = moment().utc().format('ddd, DD MMM YYYY HH:mm [GMT]');",
							"console.log(ourDateTime);",
							"// Получаем дату из заголовка ответа",
							"let responseDate = moment(responseHeaders['Date']);",
							"// Сравниваем с текущей датой",
							"pm.test(\"Дата в заголовке соответсвует текущей дате\", function () {",
							"    // Проверяем, совпадает ли дата в заголовке ответа с текущей датой",
							"    chai.expect(responseDate.isSame(ourDateTime, 'minute')).to.be.true;",
							"});",
							"",
							"pm.sendRequest(",
							"    {url: 'http://localhost:8080/api/tasks/1552',",
							"    method: 'DELETE',",
							"    header:",
							"    {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"    'accept': '*/*'}",
							"    }",
							"    , function (err, response) {",
							"    console.log(response);",
							"});",
							"",
							"pm.test(\"Your test name\", function () {",
							"    chai.expect(jsonData.text).to.eql(\"some new new text\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    chai.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code name has string \\\"OK\\\"\", function () {",
							"    chai.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Content-Type is present and application/json\", function () {",
							"    // Проверяем, что заголовок Content-Type присутствует в ответе",
							"    chai.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"    // Проверяем, что значение заголовка Content-Type содержит \"application/json\"",
							"    chai.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Cache-Control is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Cache-Control\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache, no-store, max-age=0, must-revalidate\")",
							"});",
							"",
							"pm.test(\"Content-Security-Policy is present\", function () {",
							"    chai.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"    chai.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "db7541e4-3306-476f-b7a3-8c5ad6aa9cb8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "6e805986-b536-45ed-8053-ae29e359445d"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "fcf30b7b-c6e0-4cd0-a794-90281a1624d5"
			}
		}
	]
}